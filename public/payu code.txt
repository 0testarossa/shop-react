public function actionPayU() {
      if (isset($_POST['email'])) {
        $email = strip_tags($_POST['email']);

        /** @var  $model Registration */
        $model = Registration::model()->findByAttributes(array('email' => $email));

        if (is_null($model)) {
          throw new CHttpException(400, 'Invalid request. Given email address does not exists.');
        }

        session_start();
        $_SESSION['sessionId'] = md5(rand() . rand() . rand() . rand());

        $myUrl = Yii::app()->createAbsoluteUrl('/');

        include(Yii::app()->basePath . '/vendors/payu/openpayu.php');

        OpenPayU_Configuration::setEnvironment('secure');
        OpenPayU_Configuration::setMerchantPosId('166227');
        OpenPayU_Configuration::setPosAuthKey('oGMWXVe');
        OpenPayU_Configuration::setClientId('166227');
        OpenPayU_Configuration::setClientSecret('81301ea5249f42b9966f3bd6eb78f036');
        OpenPayU_Configuration::setSignatureKey('019b25c3b28993bd30d434e1c05b5cb5');

        $shippingCost = array(
          'CountryCode'        => 'PL',
          'ShipToOtherCountry' => 'true',
          'ShippingCostList'   => array(
            array(
              'ShippingCost' => array(
                'Type'        => 'none',
                'CountryCode' => 'PL',
                'Price'       => array(
                  'Gross' => '0', 'Net' => '0', 'Tax' => '0', 'TaxRate' => '0', 'CurrencyCode' => 'PLN'
                )
              )
            ),
          )
        );

        $item = array(
          'Quantity' => 1,
          'Product'  => array(
            'Name'      => 'CBBM2014 - ' . $model->firstname . ' ' . $model->lastname . ' - ' . $model->hotelOption->name,
            'UnitPrice' => array(
              'Gross' => $model->hotelOption->worth * 100, 'Net' => 0, 'Tax' => 0, 'TaxRate' => '0', 'CurrencyCode' => 'PLN'
            )
          )
        );

        $shoppingCart = array(
          'GrandTotal'        => $model->hotelOption->worth * 100,
          'CurrencyCode'      => 'PLN',
          'ShoppingCartItems' => array(
            array('ShoppingCartItem' => $item),
          )
        );

        $order = array(
          'MerchantPosId'            => OpenPayU_Configuration::getMerchantPosId(),
          'SessionId'                => $_SESSION['sessionId'],
          'OrderUrl'                 => $myUrl . '/layout/page_cancel.php?order=' . rand(), // is url where customer will see in myaccount, and will be able to use to back to shop.
          'OrderCreateDate'          => date("c"),
          'OrderDescription'         => 'Participation in the CBBM2014 Conference (' . $model->firstname . ' ' . $model->lastname . ')',
          'MerchantAuthorizationKey' => OpenPayU_Configuration::getPosAuthKey(),
          'OrderType'                => 'VIRTUAL', // options: MATERIAL or VIRTUAL
          'ShoppingCart'             => $shoppingCart
        );

        $OCReq = array(
          'ReqId'            => uniqid(),
          'CustomerIp'       => $_SERVER['REMOTE_ADDR'], // note, this should be real ip of customer retrieved from $_SERVER['REMOTE_ADDR']
          'NotifyUrl'        => $myUrl . '/payuProcessing', // url where payu service will send notification with order processing status changes
          'OrderCancelUrl'   => $myUrl . '/payuCancel',
          'OrderCompleteUrl' => $myUrl . '/payuFinished',
          'Order'            => $order,
          'ShippingCost'     => array(
            'AvailableShippingCost'  => $shippingCost,
            'ShippingCostsUpdateUrl' => $myUrl . '/ShippingCostRetrieveRequest.php' // this is url where payu checkout service will send shipping costs retrieve request
          )
        );

        $customer = array(
          'Email'     => $model->email,
          'FirstName' => $model->firstname,
          'LastName'  => $model->lastname,
          'Phone'     => $model->phone,
          'Language'  => 'en_US',
        );

        if (!empty($customer)) $OCReq['Customer'] = $customer;

        $result = OpenPayU_Order::create($OCReq);

        if ($result->getSuccess()) {
          $result = OpenPayU_OAuth::accessTokenByClientCredentials();
        }

        $this->render('payu', array(
          'token' => $result->getAccessToken(),
          'model' => $model,
          'url'   => $myUrl
        ));

      } else {
        $this->render('register-payu', array());
      }


//      $models = Registration::model()->findAll();
//      foreach($models as $model) {
//        $title       = '';
//        $content     = Yii::t('mail', "Dear {title} {firstname} {lastname},<br><br>we acknowledge the receipt of your registration form, to the CBBM2014 conference, that will take place in Poznan-Biedrusko, June 26-28, 2014.<br><br>Below is a copy of your registration details:<br><br><strong>Registration:</strong><br><strong>Name:</strong> {firstname} {lastname}<br><strong>Organisation:</strong> {affiliation}<br><strong>Email address:</strong> {email}<br><strong>Phone number:</strong> {phone}<br><br><strong>Hotel reservation details:</strong><br>{hotelOptionName} - {hotelOptionWorth} PLN<br><br><strong>Dietary restrictions:</strong><br>{dietaryRestrictions}<br>{dietaryNotes}<br><br><strong>Payment details:</strong><br>{paymentNotes}<br><br>To confirm your registration (and hotel reservation if requested), please pay your registration fee. The deadline for early payment is March 30, 2014 (until that time the hotel reservation is kept) . Late payment can be done until June 26, however, in this case the organizers do not ensure the accommodation at conference venue.<br><br>An official confirmation of the registration/hotel accommodation will be e-mailed to you by the Organizing Secretariat after payment has been credited on the conference account.<br><br>Only that confirmation can be used to be presented at the registration desk.<br><br>The amount of: {hotelOptionWorth} PLN should be paid to the CBBM2014 conference account:<br><br><strong>Bank Zachodni WBK S.A.<br>6th Department in Poznan<br>89 1090 1362 0000 0001 1667 8037<br>SWIFT: WBKPPLPP<br>IBAN: PL 89 1090 1362 0000 0001 1667 8037<br>with a note: 'Conference CBBM 2014, [{firstname} {lastname}]'</strong><br><br>regards,<br>CBBM2014 Organizing Committee", array('{title}' => $model->title, '{firstname}' => $model->firstname, '{lastname}' => $model->lastname, '{email}' => $model->email, '{phone}' => $model->phone, '{affiliation}' => $model->affilation, '{hotelOptionName}' => $model->hotelOption->name, '{hotelOptionWorth}' => $model->hotelOption->worth, '{dietaryRestrictions}' => $model->dietary_restriction, '{dietaryNotes}' => $model->dietary_notes, '{paymentNotes}' => $model->payment_date));
//        $messageHTML = file_get_contents("assets/template/mail/default.html");
//        $messageHTML = str_replace('$TITLE$', $title, $messageHTML);
//        $messageHTML = str_replace('$CONTENT$', $content, $messageHTML);
//
//        // Plain message
//        $messagePlain = str_replace('<br />', chr(13) . chr(10), $messageHTML);
//        $messagePlain = str_replace('<br>', chr(13) . chr(10), $messagePlain);
//        $messagePlain = strip_tags($messagePlain);
//
//        $message = new YiiMailMessage();
//        $message->setSubject(Yii::t('mail', 'CBBM2014 - Registration Form received'));
//        $message->setBody($messageHTML, 'text/html');
//        $message->addPart($messagePlain, 'text/plain');
//        $message->setFrom(array('cbbm2014@cs.put.poznan.pl' => 'CBBM 2014'));
//        $message->setTo(array($model->email => $model->firstname . " " . $model->lastname));
//        Yii::app()->mail->send($message);
//      }


//      /** @var  $model Registration */
//      $model = Registration::model()->findByPk(4);
//
//      /** PayU configuration */
//      OpenPayU_Configuration::setEnvironment('sandbox');
//      OpenPayU_Configuration::setMerchantPosId('37857');
//      OpenPayU_Configuration::setPosAuthKey('ArJmhmF');
//      OpenPayU_Configuration::setClientId('37857');
//      OpenPayU_Configuration::setClientSecret('64dec4280702424aeea05ae85d20e15e');
//      OpenPayU_Configuration::setSignatureKey('a8e58d7c77722ceb73fa3fe43bf9cd53');
//
//      $session=new CHttpSession;
//
//      $this->render('register-finished-test', array(
//        'model' => $model
//      ));
    }